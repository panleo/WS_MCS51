<<<<<<< HEAD
C51 COMPILER V9.60.7.0   AULA3_PREPROJETO                                                  03/27/2025 21:42:08 PAGE 1   
=======
C51 COMPILER V9.60.7.0   AULA3_PREPROJETO                                                  03/29/2025 12:53:31 PAGE 1   
>>>>>>> primeiroDisplay


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE AULA3_PREPROJETO
OBJECT MODULE PLACED IN .\Objects\AULA3_PREPROJETO.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE AULA3_PREPROJETO.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\L
                    -istings\AULA3_PREPROJETO.lst) TABS(2) OBJECT(.\Objects\AULA3_PREPROJETO.obj)

line level    source

   1          #include <reg51.h>
   2          
<<<<<<< HEAD
   3          #define FREQ_OSC 12000000
   4          sbit RS = P1^3;
   5          sbit E  = P1^2;
   6          #define LCD_DATA P1    // Dados nos P1.4-P1.7 (DB4-DB7)
   7          
   8          
   9          void espera_us(unsigned char tempo_us);
  10          void LCD_INIT();
  11          void LCD_4B_cmd(unsigned char cmd);
  12          void LCD_PulseEnable();
  13          void LCD_4B_wt(unsigned char dado);
  14          void LCD_String(char *str);
  15          
  16          
  17          void main()
  18          { 
  19   1        LCD_INIT(); 
  20   1        LCD_String("Hello 8051");  // Escreve no LCD
  21   1        while(1);
  22   1      }
  23          
  24          void espera_us(unsigned int tempo_us)
  25          {
*** WARNING C235 IN LINE 25 OF AULA3_PREPROJETO.c: parameter 1: different types
  26   1        if (tempo_us == 0) return;
  27   1      
  28   1          TMOD &= 0xF0;  // Preserva a configuração do Timer 1
  29   1          TMOD |= 0x02;  // Timer 0 no Modo 2 (auto-reload)
  30   1          
  31   1          TH0 = (256 - tempo_us);
  32   1          TL0 = TH0;    
  33   1          TF0 = 0;  // Reseta a flag de overflow
  34   1          TR0 = 1;  // Liga o Timer 0
  35   1          while (!TF0);  // Espera até o overflow
  36   1          
  37   1          TR0 = 0;  // Desliga o Timer 0
  38   1          TF0 = 0;  // Reseta a flag
  39   1      }
  40          
  41          void LCD_INIT()
  42          {
  43   1          espera_us(60);     // Espera estabilização do LCD
  44   1          /*
  45   1          // Configuração inicial (modo 8 bits - 3 vezes)
  46   1          LCD_4B_cmd(0x30); 
  47   1          espera_us(50);
  48   1          LCD_4B_cmd(0x30);
  49   1          espera_us(50);
  50   1          LCD_4B_cmd(0x30);
  51   1          espera_us(50);
  52   1          */
  53   1      
C51 COMPILER V9.60.7.0   AULA3_PREPROJETO                                                  03/27/2025 21:42:08 PAGE 2   

  54   1          
  55   1          // Mudança para modo 4 bits
  56   1          LCD_4B_cmd(0x20); 
  57   1          espera_us(60);
  58   1          
  59   1          // Configuração do LCD: 2 linhas, fonte 5x8
  60   1          LCD_4B_cmd(0x28); 
  61   1          espera_us(60);
  62   1          
  63   1          // Liga display, cursor desligado
  64   1          LCD_4B_cmd(0x0C); 
  65   1          espera_us(60);
  66   1          
  67   1          // Limpa o display
  68   1          LCD_4B_cmd(0x01); 
  69   1          espera_us(60);
  70   1          
  71   1          // Modo de entrada (incremento automático)
  72   1          LCD_4B_cmd(0x06); 
  73   1          espera_us(60);
  74   1      
  75   1      }
  76          
  77          // Pulso no pino Enable (E)
  78          void LCD_PulseEnable() {
  79   1          E = 1;
  80   1          espera_us(60);  // Pequeno atraso (~1 µs)
  81   1          E = 0;
  82   1          espera_us(60);
  83   1      }
  84          
  85          // Envia um comando para o LCD
  86          void LCD_4B_cmd(unsigned char cmd) {
  87   1          RS = 0;           // Modo comando (RS = 0)
  88   1          LCD_DATA = (LCD_DATA & 0x0F) | (cmd & 0xF0); // Envia nibble alto (P1.4-P1.7)
  89   1          LCD_PulseEnable();
  90   1          LCD_DATA = (LCD_DATA & 0x0F) | ((cmd << 4) & 0xF0); // Envia nibble baixo
  91   1          LCD_PulseEnable();
  92   1          espera_us(60);
  93   1      }
  94          
  95          // Escreve um caractere no LCD
  96          void LCD_4B_wt(unsigned char dado) {
  97   1          RS = 1;           // Modo dado (RS = 1)
  98   1          LCD_DATA = (LCD_DATA & 0x0F) | (dado & 0xF0); // Nibble alto
  99   1          LCD_PulseEnable();
 100   1          LCD_DATA = (LCD_DATA & 0x0F) | ((dado << 4) & 0xF0); // Nibble baixo
 101   1          LCD_PulseEnable();
 102   1          espera_us(60);
 103   1      }
 104          
 105          
 106          // Escreve uma string no LCD
 107          void LCD_String(char *str) {
 108   1          while (*str) {
 109   2              LCD_4B_wt(*str++);
 110   2          }
 111   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    196    ----
C51 COMPILER V9.60.7.0   AULA3_PREPROJETO                                                  03/27/2025 21:42:08 PAGE 3   

   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
=======
   3          
   4          
   5          //#define TIME_D 0.00004
   6          
   7          sbit DB7 = P1^7;
   8          sbit DB6 = P1^6;
   9          sbit DB5 = P1^5;
  10          sbit DB4 = P1^4;
  11          sbit RS = P1^3;
  12          sbit E  = P1^2;
  13          sbit PINO = P3^5;
  14          #define LCD_DATA P1    // Dados nos P1.4-P1.7 (DB4-DB7)
  15          #define FREQ_OSC 22118400UL  // 22.1184 MHz (unsigned long)
  16          #define TIME_D   40          // 0.00004 escalonado por 10^6
  17          
  18             
  19          
  20          void Delay_ms();
  21          void LCD_INIT();
  22          void LCD_4B_cmd(unsigned char cmd);
  23          void LCD_PulseEnable();
  24          void LCD_4B_wt(unsigned char dado);
  25          void LCD_String(char *str);
  26          void returnHome(void);
  27          void entryModeSet(bit id, bit s);
  28          void displayOnOffControl(bit display, bit cursor, bit blinking);
  29          void functionSet(void);
  30          void setDdRamAddress(char address);
  31          void sendChar(char c);
  32          void sendString(char* str);
  33          bit getBit(char c, char bitNumber);
  34          
  35          
  36          
  37          void main()
  38          { 
  39   1        LCD_INIT(); 
  40   1        LCD_String("Hello 8051");  // Escreve no LCD
  41   1        PINO = 1;
  42   1        Delay_ms();
  43   1        PINO = 0;
  44   1        Delay_ms();
  45   1        while(1);
  46   1      }
  47          
  48          
  49          void Delay_ms()
  50          {
  51   1        TMOD &= 0xF0;  // Preserva a configuração do Timer 1
  52   1        TMOD |= 0x02;  // Timer 0 no Modo 2 (auto-reload)
  53   1          
  54   1        TL0 = 182; //(256 - tempo_us);
C51 COMPILER V9.60.7.0   AULA3_PREPROJETO                                                  03/29/2025 12:53:31 PAGE 2   

  55   1        TH0 = TL0;    
  56   1        TF0 = 0;  // Reseta a flag de overflow
  57   1        TR0 = 1;  // Liga o Timer 0
  58   1        while (!TF0);  // Espera até o overflow
  59   1          
  60   1        TR0 = 0;  // Desliga o Timer 0
  61   1        TF0 = 0;  // Reseta a flag
  62   1      }
  63          
  64          
  65          
  66          
  67          void LCD_INIT()
  68          {
  69   1          Delay_ms();     // Espera estabilização do LCD
  70   1          /*
  71   1          // Configuração inicial (modo 8 bits - 3 vezes)
  72   1          LCD_4B_cmd(0x30); 
  73   1          espera_us(50);
  74   1          LCD_4B_cmd(0x30);
  75   1          espera_us(50);
  76   1          LCD_4B_cmd(0x30);
  77   1          espera_us(50);
  78   1          */
  79   1      
  80   1          
  81   1          // Mudança para modo 4 bits
  82   1        
  83   1          LCD_4B_cmd(0x20); 
  84   1          Delay_ms();
  85   1          
  86   1          // Configuração do LCD: 2 linhas, fonte 5x8
  87   1          LCD_4B_cmd(0x28); 
  88   1          Delay_ms();
  89   1          
  90   1          // Liga display, cursor desligado
  91   1          LCD_4B_cmd(0x0C); 
  92   1          Delay_ms();
  93   1          
  94   1          // Limpa o display
  95   1          LCD_4B_cmd(0x01); 
  96   1          Delay_ms();
  97   1          
  98   1          // Modo de entrada (incremento automático)
  99   1          LCD_4B_cmd(0x06); 
 100   1          Delay_ms();
 101   1      
 102   1      }
 103          
 104          
 105          
 106          // Pulso no pino Enable (E)
 107          void LCD_PulseEnable() {
 108   1          E = 1;
 109   1          Delay_ms();  // Pequeno atraso (~1 µs)
 110   1          E = 0;
 111   1          Delay_ms();
 112   1      }
 113          
 114          // Envia um comando para o LCD
 115          void LCD_4B_cmd(unsigned char cmd) {
 116   1          RS = 0;           // Modo comando (RS = 0)
C51 COMPILER V9.60.7.0   AULA3_PREPROJETO                                                  03/29/2025 12:53:31 PAGE 3   

 117   1          LCD_DATA = (LCD_DATA & 0x0F) | (cmd & 0xF0); // Envia nibble alto (P1.4-P1.7)
 118   1          LCD_PulseEnable();
 119   1          LCD_DATA = (LCD_DATA & 0x0F) | ((cmd << 4) & 0xF0); // Envia nibble baixo
 120   1          LCD_PulseEnable();
 121   1          Delay_ms();
 122   1      }
 123          
 124          // Escreve um caractere no LCD
 125          void LCD_4B_wt(unsigned char dado) {
 126   1          RS = 1;           // Modo dado (RS = 1)
 127   1          LCD_DATA = (LCD_DATA & 0x0F) | (dado & 0xF0); // Nibble alto
 128   1          LCD_PulseEnable();
 129   1          LCD_DATA = (LCD_DATA & 0x0F) | ((dado << 4) & 0xF0); // Nibble baixo
 130   1          LCD_PulseEnable();
 131   1          Delay_ms();
 132   1      }
 133          
 134          
 135          // Escreve uma string no LCD
 136          void LCD_String(char *str) {
 137   1          while (*str) {
 138   2              LCD_4B_wt(*str++);
 139   2          }
 140   1      }
 141          
 142          
 143          void returnHome(void) {
 144   1      RS = 0;
 145   1      DB7 = 0;
 146   1      DB6 = 0;
 147   1      DB5 = 0;
 148   1      DB4 = 0;
 149   1      E = 1;
 150   1      E = 0;
 151   1      DB5 = 1;
 152   1      E = 1;
 153   1      E = 0;
 154   1      delay();
*** WARNING C206 IN LINE 154 OF AULA3_PREPROJETO.c: 'delay': missing function-prototype
 155   1      }
 156          void entryModeSet(bit id, bit s) {
 157   1      RS = 0;
 158   1      DB7 = 0;
 159   1      DB6 = 0;
 160   1      DB5 = 0;
 161   1      DB4 = 0;
 162   1      E = 1;
 163   1      E = 0;
 164   1      DB6 = 1;
 165   1      DB5 = id;
 166   1      DB4 = s;
 167   1      E = 1;
 168   1      E = 0;
 169   1      delay();
 170   1      }
 171          void displayOnOffControl(bit display, bit cursor, bit blinking) {
 172   1      DB7 = 0;
 173   1      DB6 = 0;
 174   1      DB5 = 0;
 175   1      DB4 = 0;
 176   1      E = 1;
 177   1      E = 0;
C51 COMPILER V9.60.7.0   AULA3_PREPROJETO                                                  03/29/2025 12:53:31 PAGE 4   

 178   1      DB7 = 1;
 179   1      DB6 = display;
 180   1      DB5 = cursor;
 181   1      DB4 = blinking;
 182   1      E = 1;
 183   1      E = 0;
 184   1      delay();
 185   1      }
 186          
 187          void functionSet(void) {
 188   1      // The high nibble for the function set is actually sent twice. Why? See 4-bit operation
 189   1      // on pages 39 and 42 of HD44780.pdf.
 190   1      DB7 = 0;
 191   1      DB6 = 0;
 192   1      DB5 = 1;
 193   1      DB4 = 0;
 194   1      RS = 0;
 195   1      E = 1;
 196   1      E = 0;
 197   1      delay();
 198   1      E = 1;
 199   1      E = 0;
 200   1      DB7 = 1;
 201   1      E = 1;
 202   1      E = 0;
 203   1      delay();
 204   1      }
 205          void setDdRamAddress(char address) {
 206   1      RS = 0;
 207   1      DB7 = 1;
 208   1      DB6 = getBit(address, 6);
 209   1      DB5 = getBit(address, 5);
 210   1      DB4 = getBit(address, 4);
 211   1      E = 1;
 212   1      E = 0;
 213   1      DB7 = getBit(address, 3);
 214   1      DB6 = getBit(address, 2);
 215   1      DB5 = getBit(address, 1);
 216   1      DB4 = getBit(address, 0);
 217   1      E = 1;
 218   1      E = 0;
 219   1      delay();
 220   1      }
 221          void sendChar(char c) {
 222   1      DB7 = getBit(c, 7);
 223   1      DB6 = getBit(c, 6);
 224   1      DB5 = getBit(c, 5);
 225   1      DB4 = getBit(c, 4);
 226   1      RS = 1;
 227   1      E = 1;
 228   1      E = 0;
 229   1      DB7 = getBit(c, 3);
 230   1      DB6 = getBit(c, 2);
 231   1      DB5 = getBit(c, 1);
 232   1      DB4 = getBit(c, 0);
 233   1      E = 1;
 234   1      E = 0;
 235   1      delay();
 236   1      }
 237          // -- End of LCD Module instructions
 238          // --------------------------------------------------------------------
 239          void sendString(char *str) {
C51 COMPILER V9.60.7.0   AULA3_PREPROJETO                                                  03/29/2025 12:53:31 PAGE 5   

 240   1      int index = 0;
 241   1      while (str[index] != 0) {
 242   2      sendChar(str[index]);
 243   2      index++;
 244   2      }
 245   1        /*while (*str)
 246   1        {
 247   1          sendChar(*str++);
 248   1        }*/
 249   1      }
 250          bit getBit(char c, char bitNumber) {
 251   1      return (c >> bitNumber) & 1;
 252   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    518    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       5
>>>>>>> primeiroDisplay
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
