C51 COMPILER V9.60.7.0   LAB3_MATHEUS_VINI                                                 03/29/2025 16:42:01 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LAB3_MATHEUS_VINI
OBJECT MODULE PLACED IN .\Objects\lab3_matheus_vini.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\Downloads\lab3_matheus_vini.c OPTIMIZE(8,SPEED) BROWSE DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\lab3_matheus_vini.lst) TABS(2) OBJECT(.\Objects\lab3_matheus_vini.obj)

line level    source

   1          #include <reg51.h>
   2          sbit DB7 = P1^7;
   3          sbit DB6 = P1^6;
   4          sbit DB5 = P1^5;
   5          sbit DB4 = P1^4;
   6          sbit RS = P1^3;
   7          sbit E = P1^2;
   8          #define LCD_DATA P1    // Dados nos P1.4-P1.7 (DB4-DB7)
   9          #define MAX_LINHA 16
  10          
  11          void returnHome(void);
  12          void entryModeSet(bit id, bit s);
  13          void displayOnOffControl(bit display, bit cursor, bit blinking);
  14          void functionSet(void);
  15          void setDdRamAddress(char address);
  16          void sendChar(char c);
  17          void sendString(char* str);
  18          bit getBit(char c, char bitNumber);
  19          void delay(void);
  20          void descobre_mensagem();
  21          void inicializa_timer();
  22          
  23          void main(void) 
  24          { 
  25   1        char mensagem[32] = "XP SHPXOR YR PXN ^RPX^\\ R RHIRSR";
  26   1        char mascara;
  27   1        char variavel_mascara= -1;
  28   1        char i,j;
  29   1        char teste[32];
  30   1        
  31   1        functionSet();
  32   1        entryModeSet(1, 0); // increment and no shift
  33   1        displayOnOffControl(1, 1, 1); // display on, cursor on and blinking on
  34   1        
  35   1        /*  O codigo itera sobre a string para cada mascara atribuida no primeiro for com a variavel mascara,
  36   1        depois ele itera para tentar buscar a string "NUMERO" dentro da string teste[36] que sofreu a alteracao 
  37   1        por operacao XOR, caso encontre ele salva o valor da mascara atual em variavel_mascara e encerra os 
  38   1        dois lacos for com breaks             */  
  39   1        
  40   1        for(mascara=0; mascara<=254; mascara++)// laco de iteracao das mascaras
  41   1        { 
  42   2          for(i=0; i<32; i++)
  43   2          {
  44   3            // testa se o caracter e diferente de espaco e deve receber a operacao XOR
  45   3              if(mensagem[i]!= ' ') {
  46   4                teste[i] = mensagem[i]^mascara;
  47   4              }
  48   3              else
  49   3              {
  50   4                teste[i] = mensagem[i];
  51   4              }         
  52   3          }
  53   2          //testa conjuntos de 6 caracteres se sao iguais a NUMERO
  54   2          for(j =0; j<26; j++)
C51 COMPILER V9.60.7.0   LAB3_MATHEUS_VINI                                                 03/29/2025 16:42:01 PAGE 2   

  55   2          {
  56   3            if(teste[j]  ==' ' && 
  57   3               teste[j+1]=='N' &&
  58   3               teste[j+2]=='U' &&
  59   3               teste[j+3]=='M' &&
  60   3               teste[j+4]=='E' &&
  61   3               teste[j+5]=='R' &&
  62   3               teste[j+6]=='O') 
  63   3            {
  64   4              //apos achar NUMERO atribui o valor da mascara atual a variavel_mascara
  65   4              variavel_mascara = mascara;
  66   4              //sai do laco de iteracao for para verificacao da string NUMERO
  67   4              break;            
  68   4            }
  69   3          }
  70   2          if(variavel_mascara!=-1){
  71   3          //sai do laco de iteracao for para mascaras
  72   3          break;
  73   3          }
  74   2        }
  75   1        
  76   1      sendString(teste);
  77   1        
  78   1      // The program can be controlled via some of the switches on port 2.
  79   1      // If switch 5 is closed the cursor returns home (address 0).
  80   1      // Otherwise, switches 6 and 7 are read - if both switches are open or both switches
  81   1      // are closed, the display does not shift.
  82   1      // If switch 7 is closed, continuously shift left.
  83   1      // If switch 6 is closed, continuously shift right.
  84   1        while (1) 
  85   1        {
  86   2          P3 |= (1<<5);
  87   2          delay();
  88   2          P3 &= ~(1<<5);
  89   2          delay();
  90   2        }
  91   1      }
  92          // LCD Module instructions -------------------------------------------
  93          // To understand why the pins are being set to the particular values in the functions
  94          // below, see HD44780.pdf.
  95          
  96          
  97          
  98          
  99          void delay() 
 100          {
 101   1        TMOD &= 0xF0;  // Preserva a configuração do Timer 1
 102   1        TMOD |= 0x02;  // Timer 0 no Modo 2 (auto-reload)   
 103   1        TL0 = 2; //(256 - tempo_us);
 104   1        TH0 = TL0;    
 105   1        TF0 = 0;  // Reseta a flag de overflow
 106   1        TR0 = 1;  // Liga o Timer 0
 107   1        while (!TF0);  // Espera até o overflow    
 108   1        TR0 = 0;  // Desliga o Timer 0
 109   1        TF0 = 0;  // Reseta a flag
 110   1      }
 111          void returnHome(void) 
 112          {
 113   1      RS = 0;
 114   1      DB7 = 0;
 115   1      DB6 = 0;
 116   1      DB5 = 0;
C51 COMPILER V9.60.7.0   LAB3_MATHEUS_VINI                                                 03/29/2025 16:42:01 PAGE 3   

 117   1      DB4 = 0;
 118   1      E = 1;
 119   1      E = 0;
 120   1      DB5 = 1;
 121   1      E = 1;
 122   1      E = 0;
 123   1      delay();
 124   1      }
 125          void entryModeSet(bit id, bit s) 
 126          {
 127   1      RS = 0;
 128   1      DB7 = 0;
 129   1      DB6 = 0;
 130   1      DB5 = 0;
 131   1      DB4 = 0;
 132   1      E = 1;
 133   1      E = 0;
 134   1      DB6 = 1;
 135   1      DB5 = id;
 136   1      DB4 = s;
 137   1      E = 1;
 138   1      E = 0;
 139   1      delay();
 140   1      }
 141          void displayOnOffControl(bit display, bit cursor, bit blinking) 
 142          {
 143   1      DB7 = 0;
 144   1      DB6 = 0;
 145   1      DB5 = 0;
 146   1      DB4 = 0;
 147   1      E = 1;
 148   1      E = 0;
 149   1      DB7 = 1;
 150   1      DB6 = display;
 151   1      DB5 = cursor;
 152   1      DB4 = blinking;
 153   1      E = 1;
 154   1      E = 0;
 155   1      delay();
 156   1      }
 157          
 158          void functionSet(void) 
 159          {
 160   1      // The high nibble for the function set is actually sent twice. Why? See 4-bit operation
 161   1      // on pages 39 and 42 of HD44780.pdf.
 162   1      DB7 = 0;
 163   1      DB6 = 0;
 164   1      DB5 = 1;
 165   1      DB4 = 0;
 166   1      RS = 0;
 167   1      E = 1;
 168   1      E = 0;
 169   1      delay();
 170   1      E = 1;
 171   1      E = 0;
 172   1      DB7 = 1;
 173   1      E = 1;
 174   1      E = 0;
 175   1      delay();
 176   1      }
 177          void setDdRamAddress(char address) 
 178          {
C51 COMPILER V9.60.7.0   LAB3_MATHEUS_VINI                                                 03/29/2025 16:42:01 PAGE 4   

 179   1      RS = 0;
 180   1      DB7 = 1;
 181   1      DB6 = getBit(address, 6);
 182   1      DB5 = getBit(address, 5);
 183   1      DB4 = getBit(address, 4);
 184   1      E = 1;
 185   1      E = 0;
 186   1      DB7 = getBit(address, 3);
 187   1      DB6 = getBit(address, 2);
 188   1      DB5 = getBit(address, 1);
 189   1      DB4 = getBit(address, 0);
 190   1      E = 1;
 191   1      E = 0;
 192   1      delay();
 193   1      }
 194          void sendChar(char c) 
 195          {
 196   1      DB7 = getBit(c, 7);
 197   1      DB6 = getBit(c, 6);
 198   1      DB5 = getBit(c, 5);
 199   1      DB4 = getBit(c, 4);
 200   1      RS = 1;
 201   1      E = 1;
 202   1      E = 0;
 203   1      DB7 = getBit(c, 3);
 204   1      DB6 = getBit(c, 2);
 205   1      DB5 = getBit(c, 1);
 206   1      DB4 = getBit(c, 0);
 207   1      E = 1;
 208   1      E = 0;
 209   1      delay();
 210   1      }
 211          // -- End of LCD Module instructions
 212          // --------------------------------------------------------------------
 213          void sendString(char* str) 
 214          {
 215   1      int index = 0;
 216   1        while (*str)
 217   1        {
 218   2          if(index < MAX_LINHA || index > MAX_LINHA)
 219   2          {
 220   3            sendChar(*str++);
 221   3            index++;
 222   3          }
 223   2          else//(index == MAX_LINHA)
 224   2          {
 225   3            setDdRamAddress(0x40);
 226   3            sendChar(*str++);
 227   3            index++;
 228   3          }     
 229   2        }
 230   1      }
 231          
 232          bit getBit(char c, char bitNumber) 
 233          {
 234   1        return (c >> bitNumber) & 1;
 235   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    622    ----
   CONSTANT SIZE    =     32    ----
C51 COMPILER V9.60.7.0   LAB3_MATHEUS_VINI                                                 03/29/2025 16:42:01 PAGE 5   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      72
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
